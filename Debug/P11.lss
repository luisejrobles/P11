
P11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5e  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000467  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005de  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000165  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 30       	cpi	r26, 0x09	; 9
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e8 c0       	rjmp	.+464    	; 0x2f2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:


int main(void)
{
	
}
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret

0000012a <Timer2_Freq_Gen>:
	/* 	Si "ticks" es mayor que 0 entonces, inicializa y habilita el Generador 
		de Frecuencia del Timer2 con el tope dado por "ticks".
		De lo contrario se requiere deshabilitar el Generador, generando de 
		esta forma el silencio (0 lógico).
		*/
	if(ticks > 0)
 12a:	88 23       	and	r24, r24
 12c:	51 f0       	breq	.+20     	; 0x142 <Timer2_Freq_Gen+0x18>
	{
		//DDRH = (1<<DDH6);
		TCCR2A = (3<<WGM20)|(2<<COM2B0);			//PWM OCR2A TOP
 12e:	93 e2       	ldi	r25, 0x23	; 35
 130:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (6<<CS20)|(1<<WGM22);				//256PS, COM2B0 non inverting
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A  = ticks -1 ;							//Tope en OCR2A
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 140:	08 95       	ret
	}else
	{
		//TCCR2B &= ~(6<<CS20);			//Deshabilitando PS para 0 logico
		TCCR2B = 0;						//Deshabilitando el generador
 142:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 146:	08 95       	ret

00000148 <__vector_21>:
	OCR0A  = 250-1;			//1ms tope
	TIMSK0 = (1<<OCIE0A);	//Habilitando interrupcion
	sei();					//Habilitando interrupciones gobales
}

ISR(TIMER0_COMPA_vect){ 
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	/* 	Código para actualizar bandera de segundos */
	static uint16_t mSeg;
	mSeg++;
 16e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 172:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
 17c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
	
	/*	Agregar las instrucciones necesarias para reproducir
		la siguiente nota en el arreglo dependiendo de la duración, 
		e insertar los silencios entre cada nota. */

	if( mSeg >= delay)
 180:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <delay>
 184:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <delay+0x1>
 188:	82 17       	cp	r24, r18
 18a:	93 07       	cpc	r25, r19
 18c:	08 f4       	brcc	.+2      	; 0x190 <__vector_21+0x48>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <__vector_21+0xe0>
	{
		mSeg = 0;
 190:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_end+0x1>
 194:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
		if(notaFin && cntNota != Fin)
 198:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <notaFin>
 19c:	88 23       	and	r24, r24
 19e:	c9 f1       	breq	.+114    	; 0x212 <__vector_21+0xca>
 1a0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <cntNota>
 1a4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Fin>
 1a8:	98 17       	cp	r25, r24
 1aa:	99 f1       	breq	.+102    	; 0x212 <__vector_21+0xca>
		{
			notaFin = 0;
 1ac:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <notaFin>
			Timer2_Freq_Gen(TICKS(cancion[cntNota].freq));
 1b0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <cntNota>
 1b4:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <cancion>
 1b8:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <cancion+0x1>
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	89 9f       	mul	r24, r25
 1c0:	e0 0d       	add	r30, r0
 1c2:	f1 1d       	adc	r31, r1
 1c4:	11 24       	eor	r1, r1
 1c6:	60 81       	ld	r22, Z
 1c8:	71 81       	ldd	r23, Z+1	; 0x01
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	3f d0       	rcall	.+126    	; 0x24e <__udivmodhi4>
 1d0:	9b 01       	movw	r18, r22
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	74 e2       	ldi	r23, 0x24	; 36
 1da:	84 ef       	ldi	r24, 0xF4	; 244
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	4b d0       	rcall	.+150    	; 0x276 <__divmodsi4>
 1e0:	82 2f       	mov	r24, r18
 1e2:	a3 df       	rcall	.-186    	; 0x12a <Timer2_Freq_Gen>
			delay = cancion[cntNota].delay;
 1e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <cntNota>
 1e8:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <cancion>
 1ec:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <cancion+0x1>
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	89 9f       	mul	r24, r25
 1f4:	e0 0d       	add	r30, r0
 1f6:	f1 1d       	adc	r31, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	82 81       	ldd	r24, Z+2	; 0x02
 1fc:	93 81       	ldd	r25, Z+3	; 0x03
 1fe:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <delay+0x1>
 202:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <delay>
			cntNota++;
 206:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <cntNota>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <cntNota>
 210:	0b c0       	rjmp	.+22     	; 0x228 <__vector_21+0xe0>
		}else
		{
			notaFin = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <notaFin>
			Timer2_Freq_Gen(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	87 df       	rcall	.-242    	; 0x12a <Timer2_Freq_Gen>
			delay = SILENCE;
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <delay+0x1>
 224:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <delay>
			Timer2_Freq_Gen(0);
			delay = SILENCE;
		}*/
	
		
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0b be       	out	0x3b, r0	; 59
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__udivmodhi4>:
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	51 e1       	ldi	r21, 0x11	; 17
 254:	07 c0       	rjmp	.+14     	; 0x264 <__udivmodhi4_ep>

00000256 <__udivmodhi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	a6 17       	cp	r26, r22
 25c:	b7 07       	cpc	r27, r23
 25e:	10 f0       	brcs	.+4      	; 0x264 <__udivmodhi4_ep>
 260:	a6 1b       	sub	r26, r22
 262:	b7 0b       	sbc	r27, r23

00000264 <__udivmodhi4_ep>:
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	5a 95       	dec	r21
 26a:	a9 f7       	brne	.-22     	; 0x256 <__udivmodhi4_loop>
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	08 95       	ret

00000276 <__divmodsi4>:
 276:	05 2e       	mov	r0, r21
 278:	97 fb       	bst	r25, 7
 27a:	16 f4       	brtc	.+4      	; 0x280 <__divmodsi4+0xa>
 27c:	00 94       	com	r0
 27e:	0f d0       	rcall	.+30     	; 0x29e <__negsi2>
 280:	57 fd       	sbrc	r21, 7
 282:	05 d0       	rcall	.+10     	; 0x28e <__divmodsi4_neg2>
 284:	14 d0       	rcall	.+40     	; 0x2ae <__udivmodsi4>
 286:	07 fc       	sbrc	r0, 7
 288:	02 d0       	rcall	.+4      	; 0x28e <__divmodsi4_neg2>
 28a:	46 f4       	brtc	.+16     	; 0x29c <__divmodsi4_exit>
 28c:	08 c0       	rjmp	.+16     	; 0x29e <__negsi2>

0000028e <__divmodsi4_neg2>:
 28e:	50 95       	com	r21
 290:	40 95       	com	r20
 292:	30 95       	com	r19
 294:	21 95       	neg	r18
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	4f 4f       	sbci	r20, 0xFF	; 255
 29a:	5f 4f       	sbci	r21, 0xFF	; 255

0000029c <__divmodsi4_exit>:
 29c:	08 95       	ret

0000029e <__negsi2>:
 29e:	90 95       	com	r25
 2a0:	80 95       	com	r24
 2a2:	70 95       	com	r23
 2a4:	61 95       	neg	r22
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	8f 4f       	sbci	r24, 0xFF	; 255
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	08 95       	ret

000002ae <__udivmodsi4>:
 2ae:	a1 e2       	ldi	r26, 0x21	; 33
 2b0:	1a 2e       	mov	r1, r26
 2b2:	aa 1b       	sub	r26, r26
 2b4:	bb 1b       	sub	r27, r27
 2b6:	fd 01       	movw	r30, r26
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <__udivmodsi4_ep>

000002ba <__udivmodsi4_loop>:
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	ee 1f       	adc	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	a2 17       	cp	r26, r18
 2c4:	b3 07       	cpc	r27, r19
 2c6:	e4 07       	cpc	r30, r20
 2c8:	f5 07       	cpc	r31, r21
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__udivmodsi4_ep>
 2cc:	a2 1b       	sub	r26, r18
 2ce:	b3 0b       	sbc	r27, r19
 2d0:	e4 0b       	sbc	r30, r20
 2d2:	f5 0b       	sbc	r31, r21

000002d4 <__udivmodsi4_ep>:
 2d4:	66 1f       	adc	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	1a 94       	dec	r1
 2de:	69 f7       	brne	.-38     	; 0x2ba <__udivmodsi4_loop>
 2e0:	60 95       	com	r22
 2e2:	70 95       	com	r23
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	bd 01       	movw	r22, r26
 2ee:	cf 01       	movw	r24, r30
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
